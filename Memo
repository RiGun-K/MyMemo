int + _  + $ + 첫글자가 뒤에나오는 숫자 + 한글 가능


기초형에 대응되는 참조형 변수는 모두 저장되어있음.
변수에 할당되는 메모리에 실제 값이 저장되면 기초형 , 메모리에 주소를 가리키면 참조형

사용자가 자료형을 만들수있음 ex) Student std;  Profess pf;
1byte = 8bits    컴퓨터에서는 데이터값을 2진수로 나타냄 ,숫자는 2의 보수 
정수형 -- byte (1=8비트) -128 ~ 127   = 2의 7승 11111111  -2의 n-1  ~  2의 n-1 -1 = -2의 7 ~ 2의 7 -1 
          -- short (2바이트 ''=16비트)   - -32768 ~ 32767  = -2의 15 ~ 2의 15 - 1
          -- int (4 ''=32)      - -21억 ~ 21억
          -- long (8 ''=256)    -

== int ~~~ = -21억 ~ 21억;
-정수형 리터럴- 기본적으로 데이터타입은 int임
모든수의 0승은 1임 , 10진수로 나타낼수잇는것은 0~9 까지 8진수는 ~7까지 16,2진수도 마찬가지 = 8진수에서 8,9는 나타낼수없음

문자,숫자 그자체가 리터럴 println(문자,숫자)  <-  10진수 14,16,17 8진수 016 8의 1승+ 1x8= 14 019 9+8의 1승
16진수 0xe 에서 x는 소대문자 상관 x 0~9 다음 10 부터 A ,B,C ---11 12 13D 14E - - - = 0xe 는 14  0x10 = 16
2진수 0b(2진수임을 나타내는것 값 x)+1100  = 2의 2승+ 3승 = 12

------부동소수점형 리터럴 = .이 있는 값(실수)에 쓰임  	IEEE754
float (4bite)  +-3.402유효숫자 6~7개 , double (8byte) 15개 정도   유효숫자 = 3.40282347 에서 숫자갯수  
146.91 = 1.4691E + 2      E+2 = 10의 2승       0.00081 = 8.1E - 4              1800000 = 1.8E + 6
                                         -2 = 10의 -2승
3.14 = 31.4 * 10의 -1승 = 314 * 10 의 -2 승          1.25641 X 10의 5승 을 구하고자한다면 가수부분(유효숫자  
                                                                               6~7개) X 10의 5승인 지수부분을 나눠서 계산
         ( 가수 )  (지수)            3_141592 , 3.141592는 다름

-자료유형이 다르면 내부적으로 유형을 동일하게 맞춘후에 계산을 해야함 

문자형      유니코드(Unicode) 각 나라마다 언어갯수가 다르기때문에 국제적으로 표준화해서 맞춤
-char = 하나의 문자를 저장 16비트 (2byte)  " "= X   ,  ' '= O   = char ch1 = " 가 " ; X  ,  ' 가 '; O
                                                                                                       ='\uac00';    (유니코드 \u+ ac00)

기초형  (정수형 실수형 문자형 논리형)

논리형 - boolean  (참,거짓을 나타냄)

수식 - 변수 x 하나만 있어도 수식임
        -변수,상수,연산자 등으로 구성된 식  , 결과 값만 있으면 됨
         System.out.println(x=5);  (O) 5로 찍힘

연산자    = + - * / %
피연산자 = 연산의 대상     / 이항연산자 = 피연산자가 2개 = 3.14 * radius
#자료유형에서 연산의 종류가 다르면 계산이 안됨
12/5 = 2 ( 정수형이므로 0.4는 날아감)
12.0/5 = 2.4 ( 12.0이 double 형이므로 자료유형을 큰 쪽인 double쪽으로 5에서 5.0으로  맞춤 )

비트 연산자 =  '0x' 가 붙으면 16 진수   16진수는 4바이트로 표현  1111 은 2의3승+ 2승 +1승+ 1 =15
1>  0x0FFF 에서 0FFF로 계산 0000,1111,1111,1111 (0,1까지니까 2진수)
                                       					             8    1  42     42   8    1
2>             ~  = NOT(반대로) = 1111,0000,0000,0000 = F000                      0x9669=1001.0110.0110.1001
							|
                                           =  0000,0000,0000,0000 =0000		0x7571=0111.0101.0111.0001
3>                       &  = AND(1과2를 비교해서 다르면 0 같으면 1)   
						                           =1111.0111.0111.1001
4>                                       = 1111,1111,1111,1111 =FFFF
                           ^   =XOR(1과2를 비교해서 다르면 1 같으면 0)

5> 	           |    =O  R(1과2를 비교해서 하나이상 1이면 1)
                                           = 1111,1111,1111,1111

6> 	           <<( ) = 왼쪽으로 (4)만큼 이동  0xFFF0 = 1111.1111.1111.0000
                  4만큼 왼쪽으로 이동 빈칸은 0으로채움           = 1111.1111.0000.0000  


문자 'char' 형  - 문자 하나만 담을수가 있음(문자열 X)

String 참조형 데이터타입이며  이 타입의  변수에는 문자열(여러 문자)을 담을수가 있음

모든 참조형 데이터타입의 변수는 대문자로 시작한다 !! ( 클래스 이름도 마찬가지 )
                     ''                 변수에는 메모리상 주소가 저장됨 

공식 - String (변수이름) = "(문자열)";     

Student stu = new Student   // Student 라는 클래스는 객체를 만들기위한 설계도 이고
	        	이 설계도에 따라서 객체를 찍어냄 , 그 찍어내어지는것이 오브젝트 (인스턴스)라고함.
			= 메모리상의 Student 객체가 만들어짐 
		
20200716 인강

형변환
	-자동적으로 발생하기도 하고 (확대변환) = 정밀도 ↓
	-강제적으로 형변환 가능

방법	- (자료형)수식;

입력	- 사용자로부터 값을 입력받는다, Scanner 클래스를 사용
	-import java.util.*;  // Scanner 클래스 포함 선언
	-Scanner input = new Scanner(System.in);
	- =) input 이라는 변수를 선언할수 있고, 

공식 	Scanner (변수이름) = new Scanner(System.in);
	
	Scanner 라는 객체를 생성하고 그 객체를 가르키는 변수를 생성

	변수 = (변수이름).nextInt();      정수 하나 입력 받을수있음 = 사용자가 입력함
	변수 = (변수이름).nextLine();       한 라인을 입력 받을수있음

-2000716, 53분 부터 제어문 시작-

if-else문

	   if(조건식) {
     	            문장 ~;      (참이면 실행)	
	}  else { 
      	            문장 ~;     (거짓이면 실행)
	}

-20200716 마무리 -

switch(조건식)

switch(number) {
   case 0:   (값이 0 이면 이쪽으로)
       system.out.println();
       break;
   case 1:
           ''
    default: (일치하는 값이 없으면 이쪽으로)
          ''

while(반복문)    조건이 참이면 반복하는 구조

while ( 조건식 )
    문장 1 ;   (반복되는 문장)  i++ 는 반복 될떄마다 i를 1씩 증가시키는 말
          
do-while 문

do {                                int i = 10;
   문장1;   (반복문장)     ("i의 값: " + i) = i의값 : 10
} while (조건) ;   (조건이 참이면 반복)

break 반복종료  continue 현재반복종료 다음반복 시작




-----------------------------------------------------------------------------------------------------------
20200716 ch02 p61 문자열 시작

switch문에는 조건문이 오지않고 변수가 옴
	 * 변수의 자료유형은 int 
	 *
	 *
	 *
	 * do=while 문은 최소 1번이상은 반복이 됨
	 *    while 문은 조건이 참이여야 반복이 됨 
for    문에는 초기식, 조건식, 증감식   = for(초기식; 조건식; 증감식;) { 문장; }
                  ;는 쓰지말기       
for (int i = 0; i < 5; i++) {   == 0부터 4까지 

Scanner input =new Scanner(System.in);    ---> 입력받기

i++ = ++i       / 반대로 역슬래시 사용법 배우기 == \ 누르면댐

% 0 으로는 나눌수가 없다 컴파일오류 ,    0은 약수에 포함 X !! 1부터 


--10/20--

-중첩 반복문- * 사용하는것이 많이 어려움

윗 for문이 ㅁ일때 밑에 for문을 n번반복

--11/03--

- break 문 - 증가시키기전에 음수값이 입력됬는지 확인하고 ~~

문자형은 string  참조형은 new 
문자하나는 ' ' 씀  랜덤객체는 자바가 생성해줌

--11/24--

-2차원 배열 = int[][] s  = new iint [3][5];         ---> 3행 5열 
- 중첩 반복문을 사용

tic tac toe  

--11/27--

지뢰찾기

--12/01--

OOP ( Object Oriented Programming ) :  c++,  c# , Javascript , Pythson
OOP 의 5대 특징 : ==  Abstraction (추상화) Inheritance(상속) Polymorphism(다형성) Encapsulation (캡슐화) + Information Hiding (정보은닉) 

( class constructor object static access modifier method overriding method overloading interface )

객체지향프로그래밍 ( 클래스 , 객체 , 메소드 )

--12/04-- 5~6문제 100 % 주관식	OOP (1) 배열(나머지)

private가 아닌 public(공개)를 하면 밖에서 접근됨. private이면 
추상화 - 영향을 끼치지않고 변경할수있다, 불필요한 정보를 은닉할수 있다.
캡슐화 - 
메소드 오버 로딩 - 동일한 이름의 메소드를 여러개 선언 할수있따 , 단 매개변수의 수나 데이터 타입 ,순서가 달라야 한다.


--12/08--  	

@override

super 라는 키워드를 이용해서 부모로 부터 상속받은것을 재정리해서 사용하겠다

Studenet  s = new Student; (0)
	s = new Professor; (X) -------------  std = prof; (X) 학생은 교수가 아님

Professor  p  = new Profeesor(); (0)
               	 p = new Student(); (X)  ------------- prof = std; (X) 교수는 학생이 아님

Person     p = new Person(); (O)  사람은 사람임
	p = new Student(); (O) 사람은 학생
	p = new Professor(); (O) 사람은 교수

person.print(); 		    // 3개의 결과값은 모두 다름  
person = std; person.print();	    // std에 대함
person = prof; person.print(); 	   // prof 에 대한 결과값   

 // 형제 끼리는 서로를 허용하지 못하지만 부모는 형제 모두 허용할수 있음 // ( 다형성 )
